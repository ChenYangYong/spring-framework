https://blog.csdn.net/jy02268879/category_9286071.html

xml解析：
在解析到自定义标签（含其它组件标签）时，会使用到DefaultNamespaceHandlerResolver类，
该类默认加载所有jar包中META-INF/spring.handlers文件，解析到标签对应的类名（实现了NamespaceHandler接口），
然后加载该类，该类创建后一般会调用一个init方法，通过该类parse方法来解析对应的标签




各BeanPostProcessor处理bean的流程
1.InstantiationAwareBeanPostProcessor（产生代理或为bean设置属性，此bean有构造之前构造之后，初始化前初始化后各种方法）
（此步在bean被new之前或之后，但一定是在被初始化之前，其它在bean被new之后）
2.MergedBeanDefinitionPostProcessor（类似处理Autowired）
3.BeanPostProcessor


    后置处理方法名称 				           何时调用该方法
postProcessBeforeInstantiation   	     在Bean实例化之前调用

postProcessAfterInstantiation 		     在Bean实例化之后调用

postProcessBeforeInitialization  	     在Bean初始化前调用

postProcessAfterInitialization  	     在Bean初始化后调用



init-method和afterPropertiesSet 都是在初始化bead时执行，执行顺序是 afterPropertiesSet
先执行，而 init-method 后执行。


spring不支持构造器、非单例模式的循环依赖
setter模式的循环依赖是bean被创建后初始化前，被包裹到ObjectFactory中，然后放入到三级缓存singletonFactories中的


ApplicationContext方式加载：



cglib：
代理类为每个目标类的每一个方法生成两个方法与之对应，例如针对目标类中的每个非private方法，代理类会生成两个方法，
以g方法为例：
一个是@Override的g方法，
一个是CGLIB$g$0（相当于目标类的g方法，该方法中直接调用super.g()方法）

三级缓存作用（主要是为了解决循环依赖）：
    一级singletonObjects：用于存放完全初始化好的 bean，从该缓存中取出的 bean 可以直接使用，
             是有DefaultSingletonBeanRegistry.addSingleton的方法放入的，放入时会清除二级缓存中值
             DefaultSingletonBeanRegistry的getSingleton(beanName,singletonFactory)会调用AbstractAutowireCapableBeanFactory的createBean方法
             获取对象，获取到后调用addSingleton存储到一级缓存
    二级earlySingletonObjects：提前曝光的单例对象的cache，存放原始的 bean 对象（尚未填充属性），用于解决循环依赖
             是由DefaultSingletonBeanRegistry.getSingleton(beanName,allowEarlyReference)的方法放入的，从 三级缓存获取后会立马放入二级缓存，
             并从三级缓存中移除
    三级singletonFactories：单例对象工厂的cache，存放 bean 工厂对象（即ObjectFactory对象），用于解决循环依赖，
             是由AbstractAutowireCapableBeanFactory.doCreateBean方法放入的，此时的对象已经被创建，用ObjectFactory
             包裹后放入三级缓存

    AbstractBeanFactory.getBean-》doGetBean-》getSingleton(beanName)-》getSingleton(beanName,allowEarlyReference)放入二级缓存
              doGetBean-》getSingleton(beanName,singletonFactory)-》createBean-》doCreateBean

    一个对象A如果有循环依赖B，在创建过程中，从genBean会走到doCreateBean方法，再进入bean A的属性赋值，此时会去创建A依赖的bean B
    ，此时A已经被放入了三级缓存，在创建B走到属性赋值时，会去调用genBean获取A，此时走到getSingleton(beanName)方法，在进入
    getSingleton(beanName,allowEarlyReference)方法，将A从三级缓存移到二级缓存，并返回A赋值给B，然后直到B创建完成，B创建完成
    后，会继续走A的创建，此时会将B赋值给A的属性，然后将A放入一级缓存，并从二级缓存中清除，自此，对象A和B都创建完成
